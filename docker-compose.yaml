services:
  xiaozhi-backend-server:
    image: ghcr.io/xiaozhi-labs/xiaozhi-server:dev
    #image: registry.cn-shanghai.aliyuncs.com/dapp/xiaozhi:backend-go-server-20251002
    container_name: xiaozhi-backend-server
    restart:  always
    pull_policy:  always
    working_dir: /apps/backend-server
    env_file:
      - .env
    environment:
      - TZ=Asia/Shanghai
      - RUN_MODE=backend
    networks:
      - xiaozhi-network
    ports:
      - "8007:8007" # 请根据实际后端服务端口调整
    extra_hosts:
      # 将宿主机的IP地址（通过host-gateway获取）映射给 localhost
      # 这会覆盖容器内默认的 /etc/hosts 中 xiaozhi.localhost -> 127.0.0.1 的条目
      - "example.localhost:host-gateway"
      - "host.docker.internal:host-gateway" # 建议同时保留标准条目
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # manager-api和manager-web模块
  xiaozhi-manager-server:
    image: ghcr.io/xiaozhi-labs/xiaozhi-server:dev 
      #image: registry.cn-shanghai.aliyuncs.com/dapp/xiaozhi:backend-go-server-20251002
    container_name: xiaozhi-manager-server
    restart: always
    pull_policy:  always
    #network_mode:  host
    working_dir: /apps/manager-server
    networks:
      - xiaozhi-network
    platform: linux/amd64
    depends_on:
      xiaozhi-server-db:
        condition: service_healthy
      xiaozhi-server-redis:
        condition: service_healthy
    ports:
      - "8002:8002"
    environment:
      - TZ=Asia/Shanghai
      - RUN_MODE=manager
    extra_hosts:
      - "example.localhost:host-gateway"
      - "host.docker.internal:host-gateway" # 建议同时保留标准条目
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  xiaozhi-server-db:
    image: registry.cn-shanghai.aliyuncs.com/dapp/xiaozhi:pgvector17
    #image: pgvector/pgvector:pg17
    restart: unless-stopped
    container_name: xiaozhi-server-db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    platform: linux/amd64
    ports:
      - '15432:5432'
    networks:
      - xiaozhi-network
    volumes:
      - ./pgvector_data:/var/lib/postgresql/data
      # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U example -d example"]
      interval: 5s
      timeout: 5s
      retries: 5
  xiaozhi-server-redis:
    image: registry.cn-shanghai.aliyuncs.com/dapp/xiaozhi:redis7.4
    restart: unless-stopped
    container_name: xiaozhi-server-redis
    env_file:
      - .env
    networks:
      - xiaozhi-network
    platform: linux/amd64
    ports:
      - "16379:6379"
    volumes:
      - ./redis_data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
networks:
  xiaozhi-network:
    driver: bridge
